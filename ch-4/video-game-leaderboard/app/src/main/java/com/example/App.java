/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package com.example;

import com.example.model.restful_exposed_models.HighScores;
import com.example.restful_service.LeaderBoardService;
import com.example.topology.LeaderBoardTopology;
import org.apache.kafka.streams.KafkaStreams;
import org.apache.kafka.streams.StoreQueryParameters;
import org.apache.kafka.streams.StreamsConfig;
import org.apache.kafka.streams.Topology;
import org.apache.kafka.streams.state.HostInfo;
import org.apache.kafka.streams.state.QueryableStoreType;
import org.apache.kafka.streams.state.QueryableStoreTypes;
import org.apache.kafka.streams.state.ReadOnlyKeyValueStore;

import java.util.Properties;

public class App {

    public static void main(String[] args) {
        System.out.println("Kafka Stateless Video Game Lea Stream Simulation");
        Topology topology = LeaderBoardTopology.build(); // class method ClassName.methodName()

        // we allow the following system properties to be overridden,
        // which allows us to run multiple instances of our app.
        // see the `runFirst` and `runSecond` gradle tasks in build.gradle
        String host = System.getProperty("host");
        Integer port = Integer.parseInt(System.getProperty("port"));
        String stateDir = System.getProperty("stateDir");
        String endpoint = String.format("%s:%s", host, port);

        // set the required properties for running Kafka Streams
        Properties config = new Properties();
        config.put(StreamsConfig.APPLICATION_ID_CONFIG, "dev1");
        config.put(StreamsConfig.BOOTSTRAP_SERVERS_CONFIG, "localhost:29092");

        // Configure an endpoint.
        config.put(StreamsConfig.CACHE_MAX_BYTES_BUFFERING_CONFIG, 0);
        config.put(StreamsConfig.APPLICATION_SERVER_CONFIG, endpoint); // localhost:7000
        config.put(StreamsConfig.STATE_DIR_CONFIG, stateDir);
        //config.put(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG, "earliest");

        // build the topology
        System.out.println("Starting Videogame Leaderboard");
        KafkaStreams streams = new KafkaStreams(topology, config);
        // close Kafka Streams when the JVM shuts down (e.g. SIGTERM)
        Runtime.getRuntime().addShutdownHook(new Thread(streams::close));
        // start streaming!
        streams.start();

        // start the REST service
        HostInfo hostInfo = new HostInfo(host, port);
        LeaderBoardService service = new LeaderBoardService(hostInfo, streams);
        service.start();
    }
}
